agents:
  queue: new-central
  modules: climacommon/2024_03_18

steps:
  - label: "test"
    parallelism: 2
    command: julia -e 'println(ENV["MEMBER_ID"])'
    env:
      MEMBER_ID: "${BUILDKITE_PARALLEL_JOB}"
  - label: Initialize
    key: init
    command: |
      julia --project=experiments/surface_fluxes_perfect_model -e '
        import Pkg; Pkg.build("CalibrateAtmos")
        Pkg.instantiate(;verbose=true)'
      julia --project=experiments/surface_fluxes_perfect_model experiments/surface_fluxes_perfect_model/generate_truth.jl
      julia --project=experiments/surface_fluxes_perfect_model -e '
        import CalibrateAtmos
        CalibrateAtmos.initialize("surface_fluxes_perfect_model")'
    agents:
      slurm_cpus_per_task: 8
    env:
      JULIA_NUM_PRECOMPILE_TASKS: 8
      JULIA_MAX_NUM_PRECOMPILE_FILES: 50

  - wait

  - label: ":abacus: iter 0"
    key: iter_0
    parallelism: 10
    command: |
      srun julia --project=experiments/surface_fluxes_perfect_model -e '
        import CalibrateAtmos as CAL
        experiment_id = "surface_fluxes_perfect_model"
        i = 0; member = ${BUILDKITE_PARALLEL_JOB} + 1
        include("experiments/surface_fluxes_perfect_model/model_interface.jl")
        physical_model = CAL.get_forward_model(Val(Symbol(experiment_id)))
        config = CAL.get_config(physical_model, member, i, experiment_id)
        CAL.run_forward_model(physical_model, config)
      '
    agents:
      slurm_cpus_per_task: 1
      slurm_ntasks: 1
      slurm_time: 5

  - wait
  
  - label: ":recycle: update"
    key: iter_0_update
    depends_on: iter_0
    command: |
      julia --project=experiments/surface_fluxes_perfect_model -e '
        import CalibrateAtmos as CAL

        experiment_id = "surface_fluxes_perfect_model"
        i = 0
        include("experiments/surface_fluxes_perfect_model/model_interface.jl")
        G_ensemble = CAL.observation_map(Val(Symbol(experiment_id)), i)
        CAL.save_G_ensemble(experiment_id, i, G_ensemble)
        CAL.update_ensemble(experiment_id, i)
      '

  - wait

  - label: ":abacus: iter 1"
    key: iter_1
    parallelism: 10
    command: |
      srun julia --project=experiments/surface_fluxes_perfect_model -e '
        import CalibrateAtmos as CAL
        experiment_id = "surface_fluxes_perfect_model"
        i = 1; member = ${BUILDKITE_PARALLEL_JOB} + 1
        include("experiments/surface_fluxes_perfect_model/model_interface.jl")
        physical_model = CAL.get_forward_model(Val(Symbol(experiment_id)))
        config = CAL.get_config(physical_model, member, i, experiment_id)
        CAL.run_forward_model(physical_model, config)
      '
    agents:
      slurm_cpus_per_task: 1
      slurm_ntasks: 1
      slurm_time: 5

  - wait
  
  - label: ":recycle: update"
    key: iter_1_update
    depends_on: iter_1
    command: |
      julia --project=experiments/surface_fluxes_perfect_model -e '
        import CalibrateAtmos as CAL

        experiment_id = "surface_fluxes_perfect_model"
        i = 1
        include("experiments/surface_fluxes_perfect_model/model_interface.jl")
        G_ensemble = CAL.observation_map(Val(Symbol(experiment_id)), i)
        CAL.save_G_ensemble(experiment_id, i, G_ensemble)
        CAL.update_ensemble(experiment_id, i)
      '

  - wait

  - label: ":abacus: iter 2"
    key: iter_2
    parallelism: 10
    command: |
      srun julia --project=experiments/surface_fluxes_perfect_model -e '
        import CalibrateAtmos as CAL
        experiment_id = "surface_fluxes_perfect_model"
        i = 2; member = ${BUILDKITE_PARALLEL_JOB} + 1
        include("experiments/surface_fluxes_perfect_model/model_interface.jl")
        physical_model = CAL.get_forward_model(Val(Symbol(experiment_id)))
        config = CAL.get_config(physical_model, member, i, experiment_id)
        CAL.run_forward_model(physical_model, config)
      '
    agents:
      slurm_cpus_per_task: 1
      slurm_ntasks: 1
      slurm_time: 5

  - wait
  
  - label: ":recycle: update"
    key: iter_2_update
    depends_on: iter_2
    command: |
      julia --project=experiments/surface_fluxes_perfect_model -e '
        import CalibrateAtmos as CAL

        experiment_id = "surface_fluxes_perfect_model"
        i = 2
        include("experiments/surface_fluxes_perfect_model/model_interface.jl")
        G_ensemble = CAL.observation_map(Val(Symbol(experiment_id)), i)
        CAL.save_G_ensemble(experiment_id, i, G_ensemble)
        CAL.update_ensemble(experiment_id, i)
      '
